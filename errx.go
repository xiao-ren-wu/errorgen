// Code generated by errorgen. DO NOT EDIT.

package errorgen

import (
	"fmt"
	errors "github.com/pkg/errors"
)

type BizError struct {
	Cause   error
	Code    ErrorCode
	Message string
}

func (e BizError) Error() string {
	if e.Cause != nil {
		return fmt.Sprintf("%s:%v", e.Message, e.Cause)
	}
	return e.Message
}

type ErrorCode int32

const (
	InvalidParamError = ErrorCode(int32(10001))
	RecordNotFound    = ErrorCode(int32(100002))
	TopKInvalid       = ErrorCode(int32(10003))
	InternalError     = ErrorCode(int32(50001))
)

func (e ErrorCode) Message() string {
	switch e {
	case InvalidParamError:
		return "参数异常"
	case RecordNotFound:
		return "未找到查询结果"
	case TopKInvalid:
		return "超出topk限制"
	case InternalError:
		return "系统异常"
	default:
		return "未知错误"
	}
}
func NewInternalError(ops ...Option) error {
	var bizErr = &BizError{
		Code:    InternalError,
		Message: InternalError.Message(),
	}
	for _, op := range ops {
		op(bizErr)
	}
	return errors.WithStack(bizErr)
}

func NewInvalidParamError(ops ...Option) error {
	var bizErr = &BizError{
		Code:    InvalidParamError,
		Message: InvalidParamError.Message(),
	}
	for _, op := range ops {
		op(bizErr)
	}
	return errors.WithStack(bizErr)
}

func NewRecordNotFound(ops ...Option) error {
	var bizErr = &BizError{
		Code:    RecordNotFound,
		Message: RecordNotFound.Message(),
	}
	for _, op := range ops {
		op(bizErr)
	}
	return errors.WithStack(bizErr)
}

func NewTopKInvalid(ops ...Option) error {
	var bizErr = &BizError{
		Code:    TopKInvalid,
		Message: TopKInvalid.Message(),
	}
	for _, op := range ops {
		op(bizErr)
	}
	return errors.WithStack(bizErr)
}

type Option func(*BizError)

func Msg(ErrorMessage string, args ...interface{}) Option {
	return func(bizErr *BizError) {
		bizErr.Message = fmt.Sprintf(ErrorMessage, args...)
	}
}

func Cause(err error) Option {
	return func(bizError *BizError) {
		bizError.Cause = err
	}
}
